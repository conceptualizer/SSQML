//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.04.03 at 08:58:47 PM EDT 
//


package com.devspringsoftware.xml.ssqml;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PredicateType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PredicateType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element ref="{http://www.devspringsoftware.com}ComparisonPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}BetweenPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}InPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}LikePredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}SimilarPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}NullPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}QuantifiedComparisonPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}ExistsPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}UniquePredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}NormalizedPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}MatchPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}OverlapsPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}DistinctPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}MemberPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}SubmultisetPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}SetPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}TypePredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}XmlContentPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}XmlDocumentPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}XmlValidPredicate"/>
 *         &lt;element ref="{http://www.devspringsoftware.com}XmlExistsPredicate"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PredicateType", propOrder = {
    "comparisonPredicateOrBetweenPredicateOrInPredicate"
})
public class PredicateType {

    @XmlElements({
        @XmlElement(name = "ComparisonPredicate", type = ComparisonPredicateType.class),
        @XmlElement(name = "BetweenPredicate", type = BetweenPredicateType.class),
        @XmlElement(name = "InPredicate", type = InPredicateType.class),
        @XmlElement(name = "LikePredicate", type = LikePredicateType.class),
        @XmlElement(name = "SimilarPredicate", type = SimilarPredicateType.class),
        @XmlElement(name = "NullPredicate", type = NullPredicateType.class),
        @XmlElement(name = "QuantifiedComparisonPredicate", type = QuantifiedComparisonPredicateType.class),
        @XmlElement(name = "ExistsPredicate", type = ExistsPredicateType.class),
        @XmlElement(name = "UniquePredicate", type = UniquePredicateType.class),
        @XmlElement(name = "NormalizedPredicate", type = NormalizedPredicateType.class),
        @XmlElement(name = "MatchPredicate", type = MatchPredicateType.class),
        @XmlElement(name = "OverlapsPredicate", type = OverlapsPredicateType.class),
        @XmlElement(name = "DistinctPredicate", type = DistinctPredicateType.class),
        @XmlElement(name = "MemberPredicate", type = MemberPredicateType.class),
        @XmlElement(name = "SubmultisetPredicate", type = SubmultisetPredicateType.class),
        @XmlElement(name = "SetPredicate", type = SetPredicateType.class),
        @XmlElement(name = "TypePredicate", type = TypePredicateType.class),
        @XmlElement(name = "XmlContentPredicate", type = XmlContentPredicateType.class),
        @XmlElement(name = "XmlDocumentPredicate", type = XmlDocumentPredicateType.class),
        @XmlElement(name = "XmlValidPredicate", type = XmlValidPredicateType.class),
        @XmlElement(name = "XmlExistsPredicate", type = XmlExistsPredicateType.class)
    })
    protected Object comparisonPredicateOrBetweenPredicateOrInPredicate;

    /**
     * Gets the value of the comparisonPredicateOrBetweenPredicateOrInPredicate property.
     * 
     * @return
     *     possible object is
     *     {@link ComparisonPredicateType }
     *     {@link BetweenPredicateType }
     *     {@link InPredicateType }
     *     {@link LikePredicateType }
     *     {@link SimilarPredicateType }
     *     {@link NullPredicateType }
     *     {@link QuantifiedComparisonPredicateType }
     *     {@link ExistsPredicateType }
     *     {@link UniquePredicateType }
     *     {@link NormalizedPredicateType }
     *     {@link MatchPredicateType }
     *     {@link OverlapsPredicateType }
     *     {@link DistinctPredicateType }
     *     {@link MemberPredicateType }
     *     {@link SubmultisetPredicateType }
     *     {@link SetPredicateType }
     *     {@link TypePredicateType }
     *     {@link XmlContentPredicateType }
     *     {@link XmlDocumentPredicateType }
     *     {@link XmlValidPredicateType }
     *     {@link XmlExistsPredicateType }
     *     
     */
    public Object getComparisonPredicateOrBetweenPredicateOrInPredicate() {
        return comparisonPredicateOrBetweenPredicateOrInPredicate;
    }

    /**
     * Sets the value of the comparisonPredicateOrBetweenPredicateOrInPredicate property.
     * 
     * @param value
     *     allowed object is
     *     {@link ComparisonPredicateType }
     *     {@link BetweenPredicateType }
     *     {@link InPredicateType }
     *     {@link LikePredicateType }
     *     {@link SimilarPredicateType }
     *     {@link NullPredicateType }
     *     {@link QuantifiedComparisonPredicateType }
     *     {@link ExistsPredicateType }
     *     {@link UniquePredicateType }
     *     {@link NormalizedPredicateType }
     *     {@link MatchPredicateType }
     *     {@link OverlapsPredicateType }
     *     {@link DistinctPredicateType }
     *     {@link MemberPredicateType }
     *     {@link SubmultisetPredicateType }
     *     {@link SetPredicateType }
     *     {@link TypePredicateType }
     *     {@link XmlContentPredicateType }
     *     {@link XmlDocumentPredicateType }
     *     {@link XmlValidPredicateType }
     *     {@link XmlExistsPredicateType }
     *     
     */
    public void setComparisonPredicateOrBetweenPredicateOrInPredicate(Object value) {
        this.comparisonPredicateOrBetweenPredicateOrInPredicate = value;
    }

}
